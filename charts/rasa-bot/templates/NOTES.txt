Rasa-bot {{ .Values.image.tag }} has been deployed!

{{- if and .Values.applicationSettings.enterprise.enabled .Values.applicationSettings.enterprise.useConfigEndpoint }}
##############################################################################
####               NOTICE: Rasa X/Enterprise is enabled                   ####
##############################################################################

The runtime configuration will be pulled from the Rasa X/Enterprise endpoint.
Endpoint: {{ .Values.applicationSettings.enterprise.url }}

It means that the endpoints configuration from the values is ignored.
{{- end }}


{{- if .Values.applicationSettings.telemetry.enabled }}
##############################################################################
####               NOTICE: Telemetry is enabled                           ####
##############################################################################

Telemetry is enabled. Visit our website to learn more: https://rasa.com/docs/rasa/telemetry/telemetry/
{{- end }}

{{- if and .Values.ingress.enabled .Values.nginx.enabled }}
##############################################################################
####               WARNING: NGINX and Ingress are enabled                 ####
##############################################################################

NGINX and Ingress are enabled. It's recommended not to use both of them together.

You can disable Ingress by setting the `ingress.enabled` parameter to `false`

  OR

You can disable NGINX by setting the `nginx.enabled` parameter to `false`
{{- end }}


{{- if and .Values.nginx.enabled .Values.nginx.tls.enabled (and (not .Values.nginx.tls.generateSelfSignedCert) (not .Values.nginx.tls.certificateSecret)) }}
{{- $errorString := "\n##############################################################################" -}}
{{- $errorString = print $errorString "\n####               ERROR: NGINX TLS misconfiguration                      ####" -}}
{{- $errorString = print $errorString "\n##############################################################################" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\nTLS for NGINX is enabled, but configuration for TLS certificates is not defined." -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\nYou can generate self-signed certificated by setting the `nginx.tls.generateSelfSignedCert` parameter to `true`" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\n  OR" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\nDefine a secret with TLS certificates by setting a secret name as a value for the `nginx.tls.certificateSecret` parameter" -}}
{{- printf $errorString | fail -}}
{{- end }}

{{- if and (index .Values "rasa-action-server").external.enabled (not (index .Values "rasa-action-server").install) (empty (index .Values "rasa-action-server").external.url) }}
{{- $errorString := "\n##############################################################################" -}}
{{- $errorString = print $errorString "\n####               ERROR: Rasa Action Server misconfiguration             ####" -}}
{{- $errorString = print $errorString "\n##############################################################################" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\nExternal Rasa Action Server is enabled, but URL is not defined." -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\nPlease define URL by setting value for the `rasa-action-server.external.url` parameter." -}}
{{- printf $errorString | fail -}}
{{- end }}

{{- if and (eq (include "rasa-bot.endpoints.lockStore.enabled" .) "true") (not .Values.applicationSettings.endpoints.lockStore.customConfiguration) (eq (include "rasa-common.redis.available" .) "false") }}
{{- $errorString := "\n##############################################################################" -}}
{{- $errorString = print $errorString "\n####               WARNING: Lock Store endpoint misconfiguration          ####" -}}
{{- $errorString = print $errorString "\n##############################################################################" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\nLock Store endpoint is enabled but Redis instance is not available." -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\nPlease use the following options to fix the issue:" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\n  - use the `.applicationSettings.endpoints.lockStore.customConfiguration` value parameter to pass a custom configuration" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\n    OR" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\n  - set the `.redis.install` value parameter to `true` in order to install Redis instance" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\n    OR" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\n  - set an external Redis host by using the `.redis.external.host` parameter" -}}
{{- printf $errorString | fail -}}
{{- end }}

{{- if and .Values.applicationSettings.enterprise.useConfigEndpoint (not .Values.applicationSettings.enterprise.url) .Values.applicationSettings.enterprise.enabled }}
{{- $errorString := "\n##############################################################################" -}}
{{- $errorString = print $errorString "\n####               ERROR: Rasa X/Enterprise misconfiguration              ####" -}}
{{- $errorString = print $errorString "\n##############################################################################" -}}
{{- $errorString = print $errorString "\n" -}}
{{- $errorString = print $errorString "\nRasa X/Enterprise is enabled with the configuration endpoint but URL is not defined." -}}
{{- $errorString = print $errorString "\nPlease use the `applicationSettings.enterprise.url` value parameter to define Rasa X/Enterprise instance." -}}
{{- printf $errorString | fail -}}
{{- end }}


##############################################################################
####      The deployment is running with the following configuration      ####
##############################################################################

Endpoints:

    Lock Store enabled:     {{ .Values.applicationSettings.endpoints.lockStore.enabled }}
    Event Broker enabled:   {{ .Values.applicationSettings.endpoints.eventBroker.enabled }}
    Tracker Store enabled:  {{ .Values.applicationSettings.endpoints.trackerStore.enabled }}
    Model Server enabled:   {{ .Values.applicationSettings.endpoints.models.enabled }}

Additional components:

    NGINX:
      Enabled:  {{ .Values.nginx.enabled }}
      TLS:      {{ .Values.nginx.tls.enabled }}

    Redis:
      Installed:  {{ .Values.redis.install }}
      External:   {{ .Values.redis.external.enabled }}

    RabbitMQ:
      Installed:  {{ .Values.rabbitmq.install }}
      External:   {{ .Values.rabbitmq.external.enabled }}

    PostgreSQL:
      Installed:  {{ .Values.postgresql.install }}
      External:   {{ .Values.postgresql.external.enabled }}

{{ if .Values.ingress.enabled }}
  Rasa URL: http{{ if .Values.ingress.tls }}s{{ end }}://{{ .Values.ingress.hostname }}
{{ else }}
To access Rasa Bot from outside of the cluster, follow the steps below:

1. Get the Rasa URL by running these commands:

{{- if contains "LoadBalancer" .Values.service.type }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ .Release.Namespace }} -w {{ include "common.names.fullname" . }}'

    export SERVICE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].port}" services {{ include "common.names.fullname" . }})
    export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "common.names.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
    echo "http://${SERVICE_IP}:${SERVICE_PORT}"

{{ if .Values.nginx.enabled }}
    NGINX is enabled, in order to send a request that goes through NGINX you can use port: {{ .Values.nginx.port }}{{ if .Values.nginx.tls.enabled }}, {{ .Values.nginx.tls.port }} (TLS){{ end }}
{{ end }}

{{- else if contains "ClusterIP"  .Values.service.type }}

    export SERVICE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].port}" services {{ include "common.names.fullname" . }})
    kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ include "common.names.fullname" . }} ${SERVICE_PORT}:${SERVICE_PORT} &
    echo "http://127.0.0.1:${SERVICE_PORT}"

{{ if .Values.nginx.enabled }}
    NGINX is enabled, in order to send a request that goes through NGINX you can use port: {{ .Values.nginx.port }}{{ if .Values.nginx.tls.enabled }}, {{ .Values.nginx.tls.port }} (TLS){{ end }}
{{ end }}

{{- else if contains "NodePort" .Values.service.type }}

    export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "common.names.fullname" . }})
    export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
    echo "http://${NODE_IP}:${NODE_PORT}"

{{- end }}
{{ end }}
