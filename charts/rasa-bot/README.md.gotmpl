{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

The Rasa Bot Helm charts deploy a Rasa Open Source Server. Rasa is an open source machine learning framework for automated text and voice-based conversations.

See [Rasa website](https://rasa.com/docs/rasa/) to learn more.

## How to use Rasa Helm repository

You need to add this repository to your Helm repositories:

```shell
helm repo add rasa https://helm.rasa.com
helm repo update
```

{{ template "chart.homepageLine" . }}

{{ template "chart.requirementsSection" . }}

## Quick start

The default configuration of the Rasa Bot chart deploys a Rasa Open Source Server, creates an initial bot project, trains a model, and serves the trained model.

Below you can find examples of how to configure your deployment or use more advanced configurations such as integration with Rasa X/Enterprise.

Default components that will be installed along with the Rasa server:

* RabbitMQ used as the backend for the [Event Broker](https://rasa.com/docs/rasa/event-brokers)
* PostgreSQL used as the backend for the [Tracker Store](https://rasa.com/docs/rasa/tracker-stores)
* Redis used as the backend for the [Lock Store](https://rasa.com/docs/rasa/lock-stores)


### Installing the Rasa Bot Chart

To install the chart with the release name `<RELEASE_NAME>` run the following command:

```bash
helm install --name <RELEASE_NAME> rasa/rasa-bot
```

After Rasa Bot was installed successfully you should see additional information on how to connect to it, e.g:

```shell
To access Rasa Bot from outside of the cluster, follow the steps below:

1. Get the Rasa URL by running these commands:

    export SERVICE_PORT=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].port}" services <RELEASE_NAME>)
    kubectl port-forward --namespace default svc/<RELEASE_NAME> ${SERVICE_PORT}:${SERVICE_PORT} &
    echo "http://127.0.0.1:${SERVICE_PORT}"


    NGINX is enabled, in order to send a request that goes through NGINX you can use port: 80
```

After executing the commands above we can send a request to Rasa Bot

```shell
curl http://127.0.0.1:${SERVICE_PORT}
Hello from Rasa: 2.4.0
```


## Configuration

Use a YAML file that specifies the values for the chart parameters to configure the chart. In this README we'll call this file `rasa-values.yaml`

1. Copy the default [values.yaml](values.yaml) value file to `rasa-values.yaml`. 
2. Set custom parameters in  `rasa-values.yaml`
3. To apply your changes, upgrade the Rasa Bot Helm chart with the new rasa-values.yaml file:

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa-bot
```

Use the same upgrade command above to apply any subsequent changes you make to your values.



### Exposing the rasa-bot deployment to the public

By default the rasa-bot service is available only within the Kubernetes cluster. 
In order to make it accessible outside the cluster, update your `rasa-values.yaml` file with the following configuration:

```yaml
service:
    type: LoadBalancer
```

### Enabling TLS for NGINX (self-signed)

To use a self-signed TLS certificate for NGINX, update your `rasa-values.yaml` with the following NGINX TLS self-signed configuration:

```yaml
nginx:
  tls:
    enabled: true
    generateSelfSignedCert: true
```

### Note on Configuring Endpoints and Channel Credentials 

To configure [endpoints]() and [channel credentials]() you can either specify them directly in rasa-values.yaml under `applicationSettings.endpoints` and `applicationSettings.credentials`, or you can [use Rasa X/Enterprise as a configuration endpoint]() if it is deployed in the same namespace as Rasa Bot. 

> It is not possible to combine the two options. If you choose to use Rasa X/Enterprise as a configuration endpoint, all other configuration of endpoints and credentials will be ignored.

### Options for loading models

To load a model for Rasa Bot to serve, you can use a model server to pull models at regular intervals (typical for production). See the next section for information on loading an initial model on startup when not using a model server.

You can use Rasa X/Enterprise as a model server or use your own model server. To configure your own model server, follow the instructions on the [Rasa docs](https://rasa.com/docs/rasa/model-storage#load-model-from-server). 

To enable a non-Rasa X model server, add this configuration information to your values:

```yaml
applicationSettings:
  # (...)
  endpoints:
    models:
      enabled: true
      url: http://my-server.com/models/default
      token: "token"
      waitTimeBetweenPulls: 20
```

To use Rasa X/Enterprise as a model server, you don't need to specify the URL, since it is defined in the [section which configures the use of Rasa X/Enterprise](), so you can add this configuration to your values:

```yaml
applicationSettings:
  # (...)
  endpoints:
    models:
      enabled: true
      token: "token"
      waitTimeBetweenPulls: 20
      useRasaXasModelServer:
        enabled: true
        # -- The tag of the model that should be pulled from Rasa X/Enterprise
        tag: "production"
```


#### Loading an initial model

The first time you install Rasa Bot, you might not have a model server available yet, or you will want some arbitrary lightweight model just to test the deployment with. For this purpose, you can choose between training or downloading an initial model. By default, the Rasa Bot chart creates an initial project and trains a model. To use this option, you don't have to change anything. 

If you want to define an existing model to download from a defined URL instead, update your `rasa-values.yaml` with the following configuration:

```yaml
applicationSettings:
  initialModel: "https://github.com/RasaHQ/rasa-x-demo/blob/master/models/model.tar.gz?raw=true"
```

Note that the URL for the initial model download has to point to a tar.gz file and must not require authentication. 

### Configuring Messaging Channels

You can enable messaging channels by specifying credentials in rasa-values.yaml in the same way you would define them in credentials.yml for running locally.

For example, to enable the REST channel, update your rasa-values.yaml file with the following channel configuration:

```yaml
applicationSettings:
  # (...)
  credentials:
    # (...)
    additionalChannelCredentials:
      rest:
```
(For the `rest` channel, no credentials are required. To learn more see: https://rasa.com/docs/rasa/connectors/your-own-website)


### Connecting Rasa Bot with Rasa X/Enterprise

Any Rasa Open Source server can stream events to a Rasa X/Enterprise using an [event broker](). Both Rasa Bot and Rasa X/Enterprise will need to refer to the  same event broker.

This means you have three options:

1. Configure Rasa Bot to refer to the event broker started by Rasa X/Enterprise
2. Configure Rasa X/Enterprise to connect to the event broker started by Rasa Bot 
3. Configure both Rasa Bot and Rasa X/Enterprise to connect to an external event broker (e.g. a managed Kafka instance)

For example: 

```yaml
applicationSettings:
  rasaX:
    enabled: true
    # here you have to put the URL to your Rasa Enterprise instance
    url: "http://example.com"
  endpoints:
    # In order to send messages to the same
    # event broker as Rasa X/Enterprise does we can pass
    # a custom configuration.
    eventBroker:
      type: "pika"
      url: "http://<exposed-rabbit-service-address>"
      username: "user"
      password: ${RABBITMQ_PASSWORD}
      port: 5672
      queues:
        - "rasa_production_events"
extraEnv:
  # The configuration for an event broker uses environment variables, thus
  # you have to pass extra environment variables that read values from
  # the rasa-x-rabbit secret.
  - name: "RABBITMQ_PASSWORD"
    valueFrom:
      secretKeyRef:
        name: rasa-x-rabbit
        key: rabbitmq-password
```

In the example above we assumed that the `rasa-x-rabbit` secret already exists and contains the `rabbitmq-password` key.

In addition to Rasa Bot configuration, you have to update Rasa X/Enterprise configuration as well, please visit [the docs](https://link-to-the-docs) to learn more.


### Using Rasa X/Enterprise deployed in the same namespace as a configuration endpoint

You can use Rasa X/Enterprise as a configuration endpoint if it is deployed in the same namespace as Rasa Bot.  (Note: Rasa X/Enterprise will return credentials and endpoints with reference to cluster-internal service addresses, which are not accessible outside that namespace. Therefore you cannot use and externally running Rasa X/Enterprise instance as a configuration endpoint.)

To use this option, you need to:
1) Enable the option to use Rasa X/Enterprise as the config endpoint:

    ```yaml
    applicationSettings:
    rasaX:
        enabled: true
        # Rasa X service address
        url: "http://rasa-rasa-x:5002"
        # Define if a runtime configuration should be pulled
        # from Rasa X/Enterprise
        useConfigEndpoint: true
    ```

2) Add all environment variables referred to by the credentials & endpoints pulled from Rasa X/Enterprise to your values.

Below is an example of a runtime configuration that is pulled from Rasa X/Enterprise. Note the environment variables that are expected to be available:

```yaml
models:
  url: ${RASA_MODEL_SERVER}
  token: ${RASA_X_TOKEN}
  wait_time_between_pulls: 10
tracker_store:
  type: sql
  dialect: postgresql
  url: rasa-x-postgresql
  port: 5432
  username: postgres
  password: ${DB_PASSWORD}
  db: ${DB_DATABASE}
  login_db: rasa
event_broker:
  type: pika
  url: rasa-x-rabbit
  username: user
  password: ${RABBITMQ_PASSWORD}
  port: 5672
  queues:
  - ${RABBITMQ_QUEUE}

action_endpoint:
  url: "http://rasa-bot-rasa-action-server/webhook"
  token:  ""
lock_store:
  type: "redis"
  url: rasa-x-redis-master
  port: 6379
  password: ${REDIS_PASSWORD}
  db: 1
cache:
  type: "redis"
  url: rasa-x-redis-master
  port: 6379
  password: ${REDIS_PASSWORD}
  db: 2
  key_prefix: "rasax_cache"
```

Therefore you would add the following to rasa-values.yaml:

```yaml
## Extra environment variables used in the Rasa X/Enterprise configuration
extraEnv:
 - name: RASA_MODEL_SERVER
   value: http://example.com/api/projects/default/models/tags/production
 - name: RASA_X_TOKEN
   valueFrom:
     secretKeyRef:
       name: rasa-x-rasa
       key: "rasaXToken"
 - name: "DB_PASSWORD"
   valueFrom:
     secretKeyRef:
       name: rasa-x-postgresql
       key: postgresql-password
 - name: "DB_DATABASE"
   value: "rasa_production"
 - name: "REDIS_PASSWORD"
   valueFrom:
     secretKeyRef:
       name: rasa-x-redis
       key: redis-password
 - name: "RABBITMQ_QUEUE"
   value: rasa_production_events
 - name: "RABBITMQ_PASSWORD"
   valueFrom:
     secretKeyRef:
       name: rasa-x-rabbit
       key: rabbitmq-password
```


## Examples of usage

More examples of usage you can find in the `examples/rasa-bot` directory.

{{ template "chart.valuesSection" . }}
